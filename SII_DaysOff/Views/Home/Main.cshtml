@using Microsoft.AspNetCore.Identity
@using SII_DaysOff.Areas.Identity.Data
@using SII_DaysOff.Data

@model PaginatedList<Requests>

@inject UserManager<ApplicationUser> UserManager

@{
	ViewData["notShow"] = false;
	ViewData["title"] = "Main";
	var user = await UserManager.GetUserAsync(User);
}

@Html.Partial("../Components/ModalCreateRequest", new SII_DaysOff.Models.Requests())
@Html.Partial("../Components/ModalEditRequest", new SII_DaysOff.Models.Requests())

<h1 class="mx-4">Days Off</h1>

<!-- Tabs para admin -->
<div class="card my-5 mx-4">
	<div class="card-header bg-light">
		<div class="row">
			<div class="col-6">
				<span class="fw-bolder">Time off balance in 2024</span>
			</div>
			<div class="col-6 d-flex justify-content-end">
				<form asp-controller="Home" asp-action="Main" method="post">
					<!--<div class="input-group">-->
					<div class="row">
						<div class="col-5"></div>
						<div class="col-4 d-flex justify-content-end">
							<div class="form-group">
								<!--<span class="input-group-btn">
									<button type="button" class="btn- btn-primary" id="decreaseYear"><<</button>
								</span>-->
								<input type="text" class="form-control form-control-custom" id="yearPicker" name="year" value="@ViewData["YearSelected"]" readonly />
								<!--<span class="input-group-btn">
									<button type="button" class="btn btn-primary" id="increaseYear">>></button>
								</span>-->
							</div>
						</div>
						<div class="col-3 d-flex justify-content-end">
							<button type="submit" class="btn btn-outline-primary">Enviar</button>
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
	<div class="card-body shadow">
		<div class="row text-center">
			@if (Model != null && Model.Count() != 0)
			{
				<div class="col-6 col-sm-2">
					<p class="fw-bold">Annual days off</p>
					<p>@Model.FirstOrDefault().User.UserVacationDays.YearNavigation.DayVacations</p>
				</div>
				<div class="col-6 col-sm-2">
					<p class="fw-bold">Additional days</p>
					<p>@Model.FirstOrDefault().User.UserVacationDays.AdditionalDays</p>
				</div>
				<div class="col-6 col-sm-2">
					<p class="fw-bold">Acquired days</p>
					<p>@Model.FirstOrDefault().User.UserVacationDays.AcquiredDays</p>
				</div>
				<div class="col-6 col-sm-2">
					<p class="fw-bold">Remaining days</p>
					@{
						int totalDays = Model.FirstOrDefault().User.UserVacationDays.YearNavigation.DayVacations;
						int acquiredDays = Model.FirstOrDefault().User.UserVacationDays.AcquiredDays;
						int additionalDays = Model.FirstOrDefault().User.UserVacationDays.AdditionalDays;
						totalDays = (totalDays - acquiredDays) + additionalDays;
					}
					<p>@totalDays</p>
				</div>
				<div class="col-6 col-sm-2">
					<p class="fw-bold">Validity start date</p>
					@{
						if (Model.FirstOrDefault().User.CreationDate.Year == DateTime.Now.Year)
						{
							<p>@Model.FirstOrDefault().User.CreationDate.ToString("yyyy-MM-dd")</p>
						}
					}
				</div>
				<div class="col-6 col-sm-2">
					<p class="fw-bold">Validity end date</p>
					<p>@DateTime.Now.Year-12-31</p>
				</div>
			}
			else
			{
				<div class="alert alert-warning alert-dismissible fade show mt-3 d-flex justify-content-start" role="alert">
					<strong>No data found</strong>
					<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
				</div>
			}
		</div>
	</div>
</div>

<div class="card shadow my-4 mx-4">
	<div class="card-header bg-light">
		<div class="row">
			<div class="col-6 d-flex justify-content-start align-items-center fw-bolder">
				Requested time off
			</div>
			<div class="col-6 d-flex justify-content-end align-items-center">
				@{
					if (ViewBag.pendingRequests > 0)
					{
						<a class="btn btn-outline-primary fw-bold mx-2 position-relative" asp-area="" asp-controller="Requests" asp-action="ManageIndex">
							Manage request
							<span class="position-absolute top-0 start-0 translate-middle badge rounded-pill bg-danger">
								@ViewBag.pendingRequests
								<span class="visually-hidden">unread messages</span>
							</span>
						</a>
					}
					else
					{
						<a class="btn btn-outline-primary fw-bold mx-2 disabled" asp-area="" asp-controller="Requests" asp-action="ManageIndex">Manage request</a>
					}
				}
				<button type="submit" class="btn btn-outline-primary fw-bold mx-2" data-bs-toggle="modal" data-bs-target="#exampleModal">New request</button>
				<a type="submit" class="btn btn-outline-primary fw-bold mx-2" asp-controller="Requests" asp-action="Calendar">Calendar</a>
			</div>
		</div>
	</div>

	<ul class="nav nav-tabs m-4">
		<li class="nav-item">
			<a class="nav-link" aria-current="page" asp-controller="Home" asp-action="Main" asp-route-optionStatus="Pending"><i class="bi bi-clock-history"></i> Pending requests</a>
		</li>
		<li class="nav-item">
			<a class="nav-link" asp-controller="Home" asp-action="Main" asp-route-optionStatus="Approved"><i class="bi bi-check-circle"></i> Approved requests</a>
		</li>
		<li class="nav-item">
			<a class="nav-link" asp-controller="Home" asp-action="Main" asp-route-optionStatus="Cancelled"><i class="bi bi-dash-circle"></i> Cancelled requests</a>
		</li>
		<form asp-controller="Home" asp-action="Main">
			<div class="form-actions no-color">
				<p>
					<input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" class="btn btn-outline-primary">
					<input type="hidden" name="optionStatus" value="@ViewData["status"]" />
					<input type="submit" value="Search" class="btn btn-outline-primary mx-3" /> |
					<a asp-action="Main" class="mx-3">Back to Full List</a>
				</p>
			</div>
		</form>
	</ul>

	<div class="card-body cardRequests">
		<div class="row">
			<div class="col test">
				<ul class="list-group">
					<li class="list-group-item list-group-item-primary">
						<div class="row text-center">
							<div class="col fw-bold">
								<a asp-controller="Home" asp-action="Main" asp-route-sortOrder="@ViewData["ReasonOrder"]" asp-route-optionStatus="@ViewData["status"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Reason<i class="bi bi-caret-down mx-1"></i></a>
							</div>
							<div class="col fw-bold">
								<a asp-controller="Home" asp-action="Main" asp-route-sortOrder="@ViewData["StartDayOrder"]" asp-route-optionStatus="@ViewData["status"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Start Date<i class="bi bi-caret-up mx-1"></i></a>
							</div>
							<div class="col fw-bold">
								<a asp-controller="Home" asp-action="Main" asp-route-sortOrder="@ViewData["HalfDayStartOrder"]" asp-route-optionStatus="@ViewData["status"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Is Half Day?</a>
							</div>
							<div class="col fw-bold">
								<a asp-controller="Home" asp-action="Main" asp-route-sortOrder="@ViewData["EndDayOrder"]" asp-route-optionStatus="@ViewData["status"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">End Date</a>
							</div>
							<div class="col fw-bold">
								<a asp-controller="Home" asp-action="Main" asp-route-sortOrder="@ViewData["HalfDayEndOrder"]" asp-route-optionStatus="@ViewData["status"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Is Half Day?</a>
							</div>
							<div class="col fw-bold">
								<a asp-controller="Home" asp-action="Main" asp-route-sortOrder="@ViewData["RequestDayOrder"]" asp-route-optionStatus="@ViewData["status"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Request Date</a>
							</div>
							<div class="col fw-bold">
								<a asp-controller="Home" asp-action="Main" asp-route-sortOrder="@ViewData["CommentsOrder"]" asp-route-optionStatus="@ViewData["status"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Comments</a>
							</div>
							<div class="col fw-bold">
								<a asp-controller="Home" asp-action="Main" asp-route-sortOrder="@ViewData["StatusOrder"]" asp-route-optionStatus="@ViewData["status"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Status</a>
							</div>
							@if (Model.Count() != 0 && Model != null && Model.FirstOrDefault().Status.Name.Equals("Pending"))
							{
								<div class="col fw-bold">Edit/Delete</div>
							}
						</div>
					</li>

					@if (Model.Count() == 0)
					{
						<div class="alert alert-warning alert-dismissible fade show mt-3" role="alert">
							<strong>No requests found | </strong> Press <a asp-controller="Home" asp-action="Main" class="alert-link">"Here"</a> to see all requests.
							<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
						</div>
						<div class="row">
							<div class="col d-flex justify-content-center">
								<i class="bi bi-folder-x no-data"></i>
							</div>
						</div>
						<div class="row">
							<div class="col d-flex justify-content-center">
								<p>No data available at this moment</p>
							</div>
						</div>
					}

					@if (Model != null)
					{
						foreach (var item in Model)
						{
							<li class="list-group-item">
								<div class="row text-center">
									<div class="col d-flex justify-content-center align-items-center">@Html.DisplayFor(model => item.Reason.Name)</div>
									<div class="col d-flex justify-content-center align-items-center">@Html.DisplayFor(model => item.StartDate)</div>
									<div class="col d-flex justify-content-center align-items-center">
										@{
											if (Html.DisplayFor(model => item.HalfDayStart).Equals(1))
											{
												<i class="bi bi-check-square-fill"></i>
											}
											else
											{
												<i class="bi bi-x-square-fill"></i>
											}
										}
									</div>
									<div class="col d-flex justify-content-center align-items-center">@Html.DisplayFor(model => item.EndDate)</div>
									<div class="col d-flex justify-content-center align-items-center">
										@{
											if (Html.DisplayFor(model => item.HalfDayEnd).Equals(1))
											{
												<i class="bi bi-check-square-fill"></i>
											}
											else
											{
												<i class="bi bi-x-square-fill"></i>
											}
										}
									</div>
									<div class="col d-flex justify-content-center align-items-center">@Html.DisplayFor(model => item.RequestDate)</div>
									<div class="col d-flex justify-content-center align-items-center">@Html.DisplayFor(model => item.Comments)</div>
									<div class="col d-flex justify-content-center align-items-center">@Html.DisplayFor(model => item.Status.Name)</div>
									@if (Model.Count() != 0 && Model != null && Model.FirstOrDefault().Status.Name.Equals("Pending"))
									{
										<div class="col">
											<a asp-controller="Requests" asp-action="Edit" asp-route-id="@item.RequestId" class="btn btn-unstyled"><i class="bi bi-pencil-square"></i></a>
											@*<a asp-route-id="@item.RequestId" data-bs-toggle="modal" data-bs-target="#editModal" class="btn btn-unstyled"><i class="bi bi-pencil-square"></i></a>*@
											<a asp-controller="Requests" asp-action="Delete" asp-route-id="@item.RequestId" method="post" class="btn btn-unstyled"><i class="bi bi-trash-fill"></i></a>
										</div>
									}
								</div>
							</li>
						}
					}
				</ul>
			</div>
		</div>
	</div>

	@{
		var previousDisabled = !Model.HasPreviousPage ? "disabled" : "";
		var nextDisabled = !Model.HasNextPage ? "disabled" : "";
	}

	<div class="card-footer py-3">
		<a asp-action="Main" asp-route-sortOrder="@ViewData["currentOrder"]"
		   asp-route-numPage="@(Model.PageIndex -1)" asp-route-currentFilter="@ViewData["CurrentFilter"]"
		   class="btn btn-primary @previousDisabled" asp-route-optionStatus="@ViewData["Status"]">Previous</a>
		@for (var i = 1; i <= Model.TotalPages; i++)
		{
			var activePage = (i == Model.PageIndex) ? "active" : "";
			<a asp-action="Main" asp-route-sortOrder="@ViewData["currentOrder"]" asp-route-numPage="@i"
			   asp-route-currentFilter="@ViewData["CurrentFilter"]" class="btn btn-primary @activePage" asp-route-optionStatus="@ViewData["Status"]">@i</a>
		}

		<a asp-action="Main" asp-route-sortOrder="@ViewData["CurrentOrder"]"
		   asp-route-numPage="@(Model.PageIndex + 1)" asp-route-currentFilter="@ViewData["CurrentFilter"]"
		   class="btn btn-primary @nextDisabled" asp-route-optionStatus="@ViewData["Status"]">Next</a>
	</div>
</div>

<script>
	var option = { animation: true, delay: 2000 };

	function Toasty() {
		var toastHTMLElement = document.getElementById("liveToast");
		var toastElement = new bootstrap.Toast(toastHTMLElement, option);
		toastElement.show();
	}

	document.addEventListener("DOMContentLoaded", function () {
		var navLinks = document.querySelectorAll('.nav-link');
		navLinks.forEach(function (navLink) {
			navLink.addEventListener('click', function () {
				navLinks.forEach(function (link) {
					link.classList.remove('active');
				});
				this.classList.add('active');
			});
		});
	});

	/* Modal crear solicitud */
	/*document.addEventListener('DOMContentLoaded', function () {
		var newRequestButton = document.getElementById('newRequestButton');
		var modal = new bootstrap.Modal(document.getElementById('exampleModal'));

		newRequestButton.addEventListener('click', function () {
			// Cargar el contenido del modal
			fetch('@Url.Action("Components", "ModalCreateRequests")')
				.then(response => response.text())
				.then(html => {
					var modalContent = document.querySelector('.modal-body');
					modalContent.innerHTML = html;
					// Llamada adicional para cargar los datos necesarios en el modal
					fetch('@Url.Action("GetUsersReasonsAndStatuses", "Requests")')
						.then(response => response.json())
						.then(data => {
							// Actualizar los campos select con los datos recibidos
							var usersSelect = document.getElementById('UserId');
							usersSelect.innerHTML = '';
							data.users.forEach(user => {
								var option = document.createElement('option');
								option.value = user.id;
								option.textContent = user.userName;
								usersSelect.appendChild(option);
							});

							var reasonsSelect = document.getElementById('ReasonId');
							reasonsSelect.innerHTML = '';
							data.reasons.forEach(reason => {
								var option = document.createElement('option');
								option.value = reason.id;
								option.textContent = reason.name;
								reasonsSelect.appendChild(option);
							});

							var statusesSelect = document.getElementById('StatusId');
							statusesSelect.innerHTML = '';
							data.statuses.forEach(status => {
								var option = document.createElement('option');
								option.value = status.id;
								option.textContent = status.name;
								statusesSelect.appendChild(option);
							});
						});
					modal.show();
				});
		});
	});*/

</script>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
}
